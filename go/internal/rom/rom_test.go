package rom_test

import (
	"io/ioutil"
	"testing"

	"chip-8/internal/rom"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLoad(t *testing.T) {
	testFilepath := "../../test/roms/test_opcode.ch8"
	expectedBytes := []byte{0x12, 0x62, 0xea, 0xac, 0xaa, 0xea, 0xce, 0xaa, 0xaa, 0xae, 0xe0, 0xa0, 0xa0, 0xe0, 0xc0, 0x40,
		0x40, 0xe0, 0xe0, 0x20, 0xc0, 0xe0, 0xe0, 0x60, 0x20, 0xe0, 0xa0, 0xe0, 0x20, 0x20, 0x60, 0x40,
		0x20, 0x40, 0xe0, 0x80, 0xe0, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0xe0, 0xe0, 0xa0, 0xe0, 0xe0, 0xe0,
		0x20, 0xe0, 0x40, 0xa0, 0xe0, 0xa0, 0xe0, 0xc0, 0x80, 0xe0, 0xe0, 0x80, 0xc0, 0x80, 0xa0, 0x40,
		0xa0, 0xa0, 0x6b, 0x1a, 0xa2, 0x32, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x2, 0xda, 0xb4,
		0x0, 0xee, 0x6b, 0x1a, 0xa2, 0xe, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x2, 0xda, 0xb4,
		0x13, 0xdc, 0x68, 0x1, 0x69, 0x5, 0x6a, 0xa, 0x6b, 0x1, 0x65, 0x2a, 0x66, 0x2b, 0xa2, 0x16,
		0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x6, 0x36, 0x2a, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x6,
		0xa2, 0x1a, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x6, 0x45, 0x2a, 0xa2, 0x2, 0xda, 0xb4,
		0x6b, 0xb, 0xa2, 0x1e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x6, 0x55, 0x60, 0xa2, 0x2,
		0xda, 0xb4, 0x6b, 0x10, 0xa2, 0x26, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x6, 0x76, 0xff,
		0x46, 0x2a, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x2e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4,
		0xa2, 0x6, 0x95, 0x60, 0xa2, 0x2, 0xda, 0xb4, 0x22, 0x42, 0x68, 0x17, 0x69, 0x1b, 0x6a, 0x20,
		0x6b, 0x1, 0xa2, 0xa, 0xd8, 0xb4, 0xa2, 0x36, 0xd9, 0xb4, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x6,
		0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0xa, 0xd9, 0xb4, 0xa2, 0x6, 0x87, 0x50, 0x47, 0x2a, 0xa2, 0x2,
		0xda, 0xb4, 0x6b, 0xb, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0xe, 0xd9, 0xb4, 0xa2, 0x6, 0x67, 0x2a,
		0x87, 0xb1, 0x47, 0x2b, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x10, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x12,
		0xd9, 0xb4, 0xa2, 0x6, 0x66, 0x78, 0x67, 0x1f, 0x87, 0x62, 0x47, 0x18, 0xa2, 0x2, 0xda, 0xb4,
		0x6b, 0x15, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x16, 0xd9, 0xb4, 0xa2, 0x6, 0x66, 0x78, 0x67, 0x1f,
		0x87, 0x63, 0x47, 0x67, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x1a, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x1a,
		0xd9, 0xb4, 0xa2, 0x6, 0x66, 0x8c, 0x67, 0x8c, 0x87, 0x64, 0x47, 0x18, 0xa2, 0x2, 0xda, 0xb4,
		0x68, 0x2c, 0x69, 0x30, 0x6a, 0x34, 0x6b, 0x1, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x1e, 0xd9, 0xb4,
		0xa2, 0x6, 0x66, 0x8c, 0x67, 0x78, 0x87, 0x65, 0x47, 0xec, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x6,
		0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x22, 0xd9, 0xb4, 0xa2, 0x6, 0x66, 0xe0, 0x86, 0x6e, 0x46, 0xc0,
		0xa2, 0x2, 0xda, 0xb4, 0x6b, 0xb, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x36, 0xd9, 0xb4, 0xa2, 0x6,
		0x66, 0xf, 0x86, 0x66, 0x46, 0x7, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x10, 0xa2, 0x3a, 0xd8, 0xb4,
		0xa2, 0x1e, 0xd9, 0xb4, 0xa3, 0xe8, 0x60, 0x0, 0x61, 0x30, 0xf1, 0x55, 0xa3, 0xe9, 0xf0, 0x65,
		0xa2, 0x6, 0x40, 0x30, 0xa2, 0x2, 0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x3a, 0xd8, 0xb4, 0xa2, 0x16,
		0xd9, 0xb4, 0xa3, 0xe8, 0x66, 0x89, 0xf6, 0x33, 0xf2, 0x65, 0xa2, 0x2, 0x30, 0x1, 0xa2, 0x6,
		0x31, 0x3, 0xa2, 0x6, 0x32, 0x7, 0xa2, 0x6, 0xda, 0xb4, 0x12, 0x52, 0x13, 0xdc}

	testRom, err := rom.Load(testFilepath)
	require.NoError(t, err)

	romBytes, err := ioutil.ReadAll(testRom)
	require.NoError(t, err)

	assert.Equal(t, expectedBytes, romBytes)
}

func TestDisassemble(t *testing.T) {
	testFilepath := "../../test/roms/test_opcode.ch8"
	expectedInstructionBytes, err := ioutil.ReadFile("../../test/fixtures/test_opcode.asm")
	require.NoError(t, err)

	testRom, err := rom.Load(testFilepath)
	require.NoError(t, err)

	instructions, err := rom.Disassemble(testRom)
	require.NoError(t, err)

	instructionBytes, err := ioutil.ReadAll(instructions)
	require.NoError(t, err)

	require.Equal(t, expectedInstructionBytes, instructionBytes)
}
